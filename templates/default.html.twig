{% extends "partials/base.html.twig" %}

{% set logged_in = user and user.player_id and user.api_key %}

{% block head %}
<script src="js/inputs.js"></script>
<script src="js/item-alarm.js"></script>
<script>

function req_per_min_to_req_per_sec(req_per_min)
{
	return req_per_min / 60.0;
}

function req_per_sec_to_req_per_min(req_per_sec)
{
	return req_per_sec * 60.0;
}

function req_per_sec_to_interval(req_per_sec)
{
	return 1.0 / req_per_sec;
}

function interval_to_req_per_sec(interval)
{
	return 1.0 / interval;
}

function adjust_all_item_intervals()
{
	let ratelimit = document.querySelector("#api_ratelimit");
	if (!ratelimit) return false;

	let req_per_min = ratelimit.value;

	//console.log("Adjusting item intervals based on a rate limit of " + req_per_min + " req/min");

	let items = document.querySelectorAll(".item");
	adjust_item_intervals(items, req_per_min);

	let items_active = document.querySelectorAll(".item.started");
	adjust_item_intervals(items_active, req_per_min);

}

function adjust_item_intervals(items, req_per_min)
{
	if (!items) return false;

	let item_count = items.length;
	//console.log("Adjusting intervals for " + item_count + " items");
	if (item_count == 0) return false;

	let interval = 0;
	if (req_per_min > 0)
	{
		let req_per_sec = req_per_min_to_req_per_sec(req_per_min);
		let req_per_sec_per_item = req_per_sec / item_count; 
		interval = req_per_sec_to_interval(req_per_sec_per_item);
	}

	console.log("Interval: " + interval + " (Items: " + item_count + ")");

	for (let item of items)
	{
		item.setAttribute("data-itemalarm-interval", interval);
	}
}

function itemalarm_cb(item, bargains, quantity, dirty)
{
	console.log("Bargains for " + item.id + ": " + quantity);

	let was_hot = item.element.classList.contains("hot");
	let item_hot = quantity > 0;
	item.element.classList.toggle("hot", item_hot);
	
	let quantity_info = item.element.querySelector(".quantity");
	quantity_info.textContent = quantity;

	let profit = calculate_profit(item, bargains);
	let profit_info = item.element.querySelector(".profit");
	profit_info.textContent = profit;

	if (dirty)
	{
		let audio = document.querySelector("#sound");
		let volume = document.querySelector("#sound_volume");
		let vol_value = parseInt(volume.value) / 100.0;
		console.log("Playing notification sound at " + vol_value + "% volume");
		audio.volume = vol_value;
		audio.play();
	}
}

function calculate_profit(item, bargains)
{
	let profit = 0;
	for (let bargain of bargains.bazaar)
	{
		profit += (item.trade_price - bargain.cost) * bargain.quantity;
	}
	for (let bargain of bargains.market)
	{
		profit += (item.trade_price - bargain.cost) * bargain.quantity;
	}
	return profit;
}

window.addEventListener("load", (event) => {

	let audio = document.querySelector("#sound");

	let items = document.querySelectorAll(".item");
	let api_key = document.querySelector("#api-key").value;

	for (let item of items)
	{
		let item_id = item.getAttribute("data-itemalarm-id");
		if (!item_id) continue;

		let alarm = new ItemAlarm(item_id, api_key, itemalarm_cb);
		alarm.init();

		let start = item.querySelector(".start");
		start.addEventListener("click", (event) => {
			alarm.start();
			let is_running = alarm.is_running();
			item.classList.toggle("started", is_running);
			item.classList.toggle("stopped", !is_running);
			adjust_all_item_intervals();			
		});
		let stop = item.querySelector(".stop");
		stop.addEventListener("click", (event) => {
			alarm.stop();
			let is_running = alarm.is_running();
			item.classList.toggle("started", is_running);
			item.classList.toggle("stopped", !is_running);
			adjust_all_item_intervals();
		});
	}
});

</script>
{% endblock %}

{% block main %}

<section class="account">
<div class="head">
	<h2 class="heading">User</h2>
</div>
<div class="body">
{% if logged_in %}
	<form class="logout" action="/logout" method="post">
		<fieldset>
			<label for="api-key">
				{% if user.profile_image %}
				<img class="profile-image" src="{{ user.profile_image }}" width="23" height="32">
				{% endif %}
				<span class="username">{{ user.name }}</span>
				<span class="faction">{{ user.faction.faction_name }}</span>
			</label>
			<input type="hidden" name="api-key" id="api-key" value="{{ user.api_key }}">
			<button type="submit"><span class="label">Logout</span></button>
		</fieldset>
	</form>
{% else %}
	<form class="login" action="/login" method="post">
	<fieldset>
		<label for="api-key">Public API Key</label>
		<input type="password" name="api-key" id="api-key" {% if user.api_key %}value="{{ user.api_key }}"{% endif %}>
		<button type="submit"><span class="label">Login</span></button>
	</fieldset>
	</form>
{% endif %}
</div>
</section>

{% if logged_in %}

<section class="items">
<div class="head">
	<h2 class="heading">Item Monitor</h2>
	<button id="items-edit-toggle" data-inputs="items-edit-toggle" data-inputs-event="click">
		<span class="icon">⚙</span>
	</button>
</div>
<div class="body">
{% if user.items|length == 0 %}
	<p>Currently no items on your watchlist.</p>
{% endif %}
<ul class="item-list">
	{% if user.items|length %}
		{% set rate_per_item = torn.api_limit / user.items|length %}
		{% set interval = (1.0 / rate_per_item)|round(2, "ceil") %}
	{% endif %}
	{% for item_id, item in user.items %}
		{% set trade_value = item.trade_price ? item.trade_price : items[item_id].market_value %}
		{% set alarm_value = item.alarm_price ? item.alarm_price : (trade_value * 0.85)|round %}
	<li class="item stopped" 
		data-itemalarm-id="{{ item_id }}"
		data-itemalarm-bargains="" 
		data-itemalarm-alarm-price="{{ alarm_value }}"
		data-itemalarm-trade-price="{{ trade_value }}"
		data-itemalarm-market-value="{{ items[item_id].market_value }}" 
		data-itemalarm-interval="{{ interval }}">
		<div class="watch">
		<div class="controls">
			<button class="start">
				<span class="icon">▶</span>
				<span class="label">Start</span>
			</button>
			<button class="stop">
				<span class="icon">■</span>
				<span class="label">Stop</span>
			</button>
		</div>
		<div class="image">
			<img src="{{ items[item_id].image }}">
		</div>
		<div class="info">
			<span class="name">{{ items[item_id].name }}</span>
			<span class="alarm_price">🔔 ${{ alarm_value }}</span>
			<span class="trade_price">💰 ${{ trade_value }}</span>
		</div>
		<div class="alarm">
			<div class="bargain">
				<span class="quantity">0</span>
				<span class="profit">0</span>
			</div>
		</div>
		<div class="actions">
			<a class="button" href="{{ torn.market_link }}{{ item_id }}" target="_blank">
				<span class="icon">🛒</span>
				<span class="label">To Market</span>
			</a>
		</div>
		</div>
		<div class="edit">
			<form class="edit-item" action="/edit-item" method="post">
				<formgroup class="edit-alarm-price">
					<label>Alarm price</label>
					<select name="alarm-price-model">
						<option value="manual-value">Manual value</option>
						{# <option value="profit-per-item">Profit per item</option> #}
						{# <option value="profit-per-listing">Profit per listing</option> #}
					</select>
					<input type="number" name="alarm-price" {% if item.alarm_price %}value="{{ item.alarm_price }}"{% endif %}>
				</formgroup>
				<formgroup class="edit-trade-price">
					<label>Reference price</label>
					<select name="trade-price-model">
						<option value="manual-value">Manual value</option>
						{# <option value="market-value">Market value</option> #}
					</select>
					<input type="number" name="trade-price" {% if item.trade_price %}value="{{ item.trade_price }}"{% endif %}>
				</formgroup>
				<formgroup class="edit-item-save">
					<input type="hidden" name="item-id" value="{{ item_id }}">
					<button type="submit">
						<span class="icon">💾</span>
						<span class="label">Save</span>
					</button>
				</formgroup>
			</form>
			<form class="delete-item" action="/remove-item" method="post">
				<formgroup>
					<input type="hidden" name="item-id" value="{{ item_id }}">
					<button type="submit">
						<span class="icon">🗑️</span>
						<span class="label">Remove</span>
					</button>
				</formgroup>
			</form>
		</div>
	</li>
	{% endfor %}
</ul>
</div>
<script>
	function on_items_edit_toggle(details)
	{
		let items_panel = document.querySelector(".items");
		if (!items_panel) return;

		items_panel.classList.toggle("edit");
	}

	window.addEventListener("load", (event) => {
		let inputs = new Inputs({ "name": "items-edit-toggle", "callback": on_items_edit_toggle });
		inputs.init();
	});
</script>
</section>

{% endif %}
{% if logged_in %}

<section class="add-item">
<div class="head">
	<h2 class="heading">Add Items</h2>
</div>
<div class="body">
<form action="/add-item" method="post">
<fieldset>
	<select name="item-id" id="add-item-id">
		<option value="">(please select)</option>
		{% for key, item in items %}
		<option value="{{ key }}">{{ item.name }}</option>
		{% endfor %}
	</select>
	<button type="submit">
		<span class="icon">+</span>
		<span class="label">Add</span>
	</button>
</fieldset>
</form>
</div>
</section>

{% endif %}
{% if logged_in %}

<section class="settings-panel">
<div class="head">
	<h2 class="heading">Settings</h2>
</div>
<div class="body">
	{% set api_ratelimit = user.api_ratelimit ? user.api_ratelimit : 60 %}
	{% set sound_volume = user.sound_volume ? user.sound_volume : 50 %}
	<p>Your API rate limit across all API keys is 100 requests/minute.<br> If you use other tools, like Yata, <strong>definitely</strong> keep the limit here below 100.</p>
	<audio id="sound" preload="auto" src="/audio/545365__stwime__idk2.mp3"></audio>
	<fieldset>
		<label for="api_ratelimit">API rate limit</label>
		<input type="range" id="api_ratelimit" name="api_ratelimit" step="1" min="0" max="100" value="{{ api_ratelimit }}" data-inputs="settings" data-inputs-event="input">
		<output for="api_ratelimit">
			<span class="value">{{ api_ratelimit }}</span>
			<span class="unit">req/min</span>
		</output>
	</fieldset>
	<fieldset>
		<label for="sound_volume">Volume</label>
		<input type="range" id="sound_volume" name="sound_volume" step="1" min="0" max="100" value="{{ sound_volume }}" data-inputs="settings" data-inputs-event="input">
		<output for="sound_volume">
			<span class="value">{{ sound_volume }}</span>
			<span class="unit">%</span>
		</output>
	</fieldset>
{#
	<fieldset>
		<label for="dynamic_prices">Use market values</label>
		<input type="checkbox" id="dynamic_prices">
	</fieldset>
#}
</div>
<script>
window.addEventListener("load", (event) => {

	function on_settings_input(details)
	{
		let id = details.id;
		if (!id) return;

		let output = document.querySelector('output[for="'+id+'"] .value');
		if (!output) return;

		output.innerHTML = details.value;

		if (id == "api_ratelimit")
		{
			adjust_all_item_intervals();
		}
	}

	let inputs = new Inputs({"name": "settings", "callback": on_settings_input});
	inputs.init();
	inputs.fire();
});

</script>
</section>

{% endif %}

{#
<section class="info">
<div class="head">
	<h2 class="heading">Info</h2>
</div>
<div class="body">
	<ul>
		<li class="api_limit">
			<span class="label">Limit: </span>
			<span class="value">{{ torn.api_limit|round(2) }}</span>
			<span class="unit">/s</span>
		</li>
		<li class="req_max">
			<span class="label">Maximum: </span>
			<span class="value">{{ info.req_per_sec|round(2) }}</span>
			<span class="unit">/s</span>
		</li>
		<li class="req_cur">
			<span class="label">Current: </span>
			<span class="value">0.00</span>
			<span class="unit">/s</span>
		</li>
	</ul>
</div>
</section>
#}

{% endblock %}
